name: Create Branch on Issue Creation

on:
  issues:
    types: [opened, edited, labeled, reopened]

jobs:
  handle-issue-template:
    runs-on: ubuntu-latest
    if: >
      github.event.action == 'opened' || 
      github.event.action == 'edited' ||
      (github.event.action == 'labeled' && github.event.label.name == 'hasBranch')
    steps:
      - name: Check issue type and add hasBranch label
        run: |
          TITLE="${{ github.event.issue.title }}"

          # Detect if issue is a feature request or bug report
          if [[ "$TITLE" == *"[FEATURE]"* || "$TITLE" == *"[FEAT]"* || "${{ contains(github.event.issue.labels.*.name, 'enhancement') }}" == "true" ]]; then
            ISSUE_TYPE="feature"
            echo "Detected feature request"
            
            # Add hasBranch label if it doesn't exist already
            if [[ "${{ contains(github.event.issue.labels.*.name, 'hasBranch') }}" != "true" ]]; then
              curl -X POST -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
                   -H "Accept: application/vnd.github.v3+json" \
                   https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/labels \
                   -d '{"labels":["hasBranch"]}'
            fi
            
          elif [[ "$TITLE" == *"[BUG]"* || "$TITLE" == *"[FIX]"* || "${{ contains(github.event.issue.labels.*.name, 'bug') }}" == "true" ]]; then
            ISSUE_TYPE="fix"
            echo "Detected bug report"
            
            # Add hasBranch label if it doesn't exist already
            if [[ "${{ contains(github.event.issue.labels.*.name, 'hasBranch') }}" != "true" ]]; then
              curl -X POST -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
                   -H "Accept: application/vnd.github.v3+json" \
                   https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/labels \
                   -d '{"labels":["hasBranch"]}'
            fi
          fi

  create-branch:
    runs-on: ubuntu-latest
    needs: handle-issue-template
    if: contains(github.event.issue.labels.*.name, 'hasBranch')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Add issue comment - Branch is Creating...
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
               -d '{"body": "Branch is Creating..."}'
      - name: Extract issue details
        id: issue
        run: |
          TITLE="${{ github.event.issue.title }}"
          NUMBER="${{ github.event.issue.number }}"

          # Determine issue type based on title and labels
          ISSUE_TYPE="feature"  # Default to feature

          # Check for [TYPE] format in the title
          if [[ "$TITLE" =~ ^\[(.*?)\] ]]; then
            # Extract the text between brackets and convert to lowercase
            TYPE_FROM_TITLE=$(echo "${BASH_REMATCH[1]}" | tr '[:upper:]' '[:lower:]')
            
            # Map the type from title to branch prefix
            case "$TYPE_FROM_TITLE" in
              feature|feat) ISSUE_TYPE="feature" ;;
              bug|bugfix|fix) ISSUE_TYPE="fix" ;;
              chore|task) ISSUE_TYPE="chore" ;;
              doc|docs) ISSUE_TYPE="docs" ;;
              refactor) ISSUE_TYPE="refactor" ;;
              test) ISSUE_TYPE="test" ;;
              style) ISSUE_TYPE="style" ;;
              perf) ISSUE_TYPE="perf" ;;
              ci) ISSUE_TYPE="ci" ;;
              build) ISSUE_TYPE="build" ;;
            esac
          else
            # Check issue labels
            if [[ "${{ contains(github.event.issue.labels.*.name, 'bug') }}" == "true" ]]; then
              ISSUE_TYPE="fix"
            elif [[ "${{ contains(github.event.issue.labels.*.name, 'enhancement') }}" == "true" ]]; then
              ISSUE_TYPE="feature"
            elif [[ "${{ contains(github.event.issue.labels.*.name, 'documentation') }}" == "true" ]]; then
              ISSUE_TYPE="docs"
            fi
            
            # Extract from first word if no type detected yet
            if [[ "$ISSUE_TYPE" == "feature" ]]; then
              FIRST_WORD=$(echo "$TITLE" | awk '{print $1}' | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]-')
              FIRST_WORD=$(echo "$FIRST_WORD" | sed 's/:$//')
              
              case "$FIRST_WORD" in
                feat|feature) ISSUE_TYPE="feature" ;;
                fix|bugfix|bug) ISSUE_TYPE="fix" ;;
                chore) ISSUE_TYPE="chore" ;;
                docs) ISSUE_TYPE="docs" ;;
                refactor) ISSUE_TYPE="refactor" ;;
                test) ISSUE_TYPE="test" ;;
                style) ISSUE_TYPE="style" ;;
                perf) ISSUE_TYPE="perf" ;;
                ci) ISSUE_TYPE="ci" ;;
                build) ISSUE_TYPE="build" ;;
              esac
            fi
          fi

          # Remove issue type or [TYPE] from the title and format safely
          if [[ "$TITLE" =~ ^\[(.*?)\] ]]; then
            SAFE_TITLE=$(echo "$TITLE" | sed 's/^\[.*\] *//' | tr ' ' '-' | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]-')
          else
            SAFE_TITLE=$(echo "$TITLE" | sed "s/^$ISSUE_TYPE[:]* *//" | tr ' ' '-' | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]-')
          fi

          # Construct the branch name
          BRANCH_NAME="${ISSUE_TYPE}/#${NUMBER}-${SAFE_TITLE}"

          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "Branch to be created: $BRANCH_NAME"

      - name: Create new branch
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git fetch origin
          git checkout -b $BRANCH_NAME origin/main
          git push origin $BRANCH_NAME
      - name: Update issue with checkout command
        run: |
          CHECKOUT_COMMAND="\`\`\`bash\ngit fetch origin\ngit checkout $BRANCH_NAME\n\`\`\`"
          curl -X POST -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
               -d "{\"body\": \"Branch created successfully! Use the following command to check it out:\n\n$CHECKOUT_COMMAND\"}"
      - name: Link branch to issue in the Development section
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/development \
               -d "{\"head_branch\": \"$BRANCH_NAME\"}"
    continue-on-error: true
  error-handling:
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Add error comment to issue
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
               -d '{"body": "Failed to create branch for this issue. Please check the workflow logs for details."}'
